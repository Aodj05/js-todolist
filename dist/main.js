/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _modules_UI__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./modules/UI */ \"./src/modules/UI.js\");\n\r\n\r\ndocument.addEventListener('DOMContentLoaded', _modules_UI__WEBPACK_IMPORTED_MODULE_0__[\"default\"].loadHomepage)\n\n//# sourceURL=webpack://js-todolist/./src/index.js?");

/***/ }),

/***/ "./src/modules/UI.js":
/*!***************************!*\
  !*** ./src/modules/UI.js ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ UI)\n/* harmony export */ });\n\r\n\r\n\r\n\r\n\r\nclass UI {\r\n    // Load\r\n\r\n    static loadHomepage() {\r\n        UI.loadProjects()\r\n        UI.initProjectBtns()\r\n        UI.openProject('Inbox', document.getElementById('btn-inbox-projects'))\r\n        document.addEventListener('keydown', UI.handleKeyboardInput)\r\n    }\r\n\r\n    static loadProjects() {\r\n        Storage.getTodoList().getProjects().forEach((project) => {\r\n            if(project.name !== 'Inbox' &&\r\n               project.name !== 'Today' &&\r\n               project.name !== 'This Week') {\r\n                UI.createProject(project.name)\r\n               }\r\n        })\r\n\r\n        UI.initAddProjectBtns()\r\n    }\r\n\r\n    static loadTasks(projectName) {\r\n        Storage.getTodoList().getProject(projectName).getTasks().forEach((task) => UI.createTask(task.name, task.dueDate))\r\n        if (projectName !== 'Today' && projectName !== 'This Week') {\r\n            UI.initAddTaskBtns()\r\n        }\r\n    }\r\n\r\n    static loadProjectContent(projectName) {\r\n        const projectPreview = document. getElementById('project-preview')\r\n        projectPreview.innerHTML = `<h1 id=\"project-name\">${projectName}</h1>\r\n                                    <div class=\"tasks-list\" id=\"tasks-list\"></div>`\r\n        \r\n        if (projectName !== 'Today' && projectName !== 'This Week') {\r\n            projectPreview.innerHTML += `<button class=\"btn-add-task\" id=\"btn-add-task\">\r\n                                          Add Task\r\n                                        </button>\r\n                                        <div class=\"add-task-popup\" id=\"add-task-popup\">\r\n                                          <input class=\"input-add-task-popup\"\r\n                                                 id=\"input-add-task-popup\"\r\n                                                 type=\"text\"\r\n                                          />\r\n                                          <div class=\"add-task-popup-btns\">\r\n                                            <button class=\"btn-add-task-popup\" id=\"btn-add-task-popup\">\r\n                                              Add\r\n                                            </button>\r\n                                            <button class=\"btn-cancel-task-popup\" id=\"btn-cancel-task-popup\">\r\n                                              Cancel\r\n                                            </button>\r\n                                          </div>\r\n                                        </div>`\r\n        }\r\n\r\n        UI.loadTasks(projectName)\r\n    }\r\n\r\n    // Create\r\n\r\n    static createProject(name) {\r\n        const userProjects = document.getElementById('projects-list')\r\n        userProjects.innerHTML += `<button class=\"btn-project\" data-project-btn\r\n                                      <div class=\"left-project-panel\">\r\n                                        <span>${name}</span>\r\n                                      </div>\r\n                                      <div class=\"right-project-panel\">\r\n                                        <i class=\"project\"></i>\r\n                                      </div>\r\n                                    </button>`\r\n\r\n        UI.initProjectBtns()\r\n    }\r\n\r\n    static createTask(name, dueDate) {\r\n        const tasksList = document.getElementById('tasks-list')\r\n        tasksList.innerHTML+= `<button class=\"btn-task\" data-task-btn>\r\n                                  <div class=\"left-task-panel\">\r\n                                    <i class=\"t-item\"></i>\r\n                                    <p class=\"task-content\">${name}</p>\r\n                                    <input type=\"text\" class=\"input-task-name\" data-input-task-name>\r\n                                  </div>\r\n                                  <div class=\"right-task-panel\">\r\n                                    <p class=\"due-date\" id=\"due-date\">${dueDate}</p>\r\n                                    <input type=\"date\" class=\"input-due-date\" data-input-due-date>\r\n                                    <i class=\"project\"></i>\r\n                                  </div>\r\n                                </button>`\r\n\r\n        UI.initTaskBtns()\r\n    }\r\n\r\n    static clear() {\r\n        UI.clearProjectPreview()\r\n        UI.clearProjects()\r\n        UI.clearTasks()\r\n    }\r\n\r\n    static clearProjectPreview() {\r\n        const projectPreview = document.getElementById('project-preview')\r\n        projectPreview.textContent = ''\r\n    }\r\n\r\n    static clearProjects() {\r\n        const projectsList = document.getElementById('projects-list')\r\n        projectsList.textContent = ''\r\n    }\r\n\r\n    static clearTasks() {\r\n        const tasksList = document.getElementById('tasks-list')\r\n        tasksList.textContent = ''\r\n    }\r\n\r\n    static closeAllPopups() {\r\n        UI.closeAddProjectPopup()\r\n        if ( document.getElementById('btn-add-task')) {\r\n            UI.closeAddTaskPopup()\r\n        }\r\n        if ( document.getElementById('tasks-list') &&\r\n             document.getElementById('tasks-list').innerHTML !== '') {\r\n                UI.closeAllInputs()\r\n             }\r\n    }\r\n\r\n    static closeAllInputs() {\r\n        const taskBtns = document.querySelectorAll('[data-task-btn]')\r\n\r\n        taskBtns.forEach((button) => {\r\n            UI.closeRenameInput(button)\r\n            UI.closeSetDateInput(button)\r\n        })\r\n    }\r\n\r\n    static handleKeyboardInput(e) {\r\n        if (e.key === 'Escape') UI.closeAllPopups()\r\n    }\r\n\r\n    // Adding Projects\r\n\r\n    static initAddProjectBtns() {\r\n        const addProjectBtn = document.getElementById('btn-add-projects')\r\n        const addProjectPopupBtn = document.getElementById('btn-add-project-popup')\r\n        const cancelProjectPopupBtn = document.getElementById('btn-cancel-project-popup')\r\n        const addProjectPopupInput = document.getElementById('input-add-project-popup')\r\n\r\n        addProjectBtn.addEventListener('click', UI.openAddProjectPopup)\r\n        addProjectPopupBtn.addEventListener('click', UI.addProject)\r\n        cancelProjectPopupBtn.addEventListener('click', UI.closeAddProjectPopup)\r\n        addProjectPopupInput.addEventListener('keypress', UI.handleAddProjectPopupInput)\r\n    }\r\n\r\n    static openAddProjectPopup() {\r\n        const addProjectPopup = document.getElementById('add-project-popup')\r\n        const addProjectBtn = document.getElementById('btn-add-project')\r\n\r\n        UI.closeAllPopups()\r\n        addProjectPopup.classList.add('active')\r\n        addProjectBtn.classList.add('active')\r\n    }\r\n\r\n    static closeAddProjectPopup() {\r\n        const addProjectPopup = document.getElementById('add-project-popup')\r\n        const addProjectBtn = document.getElementById('btn-add-project')\r\n        const addProjectPopupInput = document.getElementById('input-add-project-popup')\r\n\r\n        addProjectPopup.classList.add('active')\r\n        addProjectBtn.classList.add('active')\r\n        addProjectPopupInput.classList.value = ''\r\n    }\r\n\r\n    static addProject() {\r\n        const addProjectPopupInput = document.getElementById('input-add-project-popup')\r\n        const projectName = addProjectPopupInput.value\r\n\r\n        if (projectName === '') {\r\n            alert(\"Project must have a name\")\r\n            return\r\n        }\r\n        \r\n        if (Storage.getTodoList().contains(projectName)) {\r\n            addProjectPopupInput.value = ''\r\n            alert(\"Project must have a different name than one that already exists\")\r\n            return\r\n        }\r\n\r\n        Storage.addProject(new Project(projectName))\r\n        UI.createProject(projectName)\r\n        UI.closeAddProjectPopup()\r\n    }\r\n\r\n    static handleAddProjectPopupInput(e) {\r\n        if (e.key === 'Enter') UI.addProject()\r\n    }\r\n\r\n    // Project Event Listeners\r\n\r\n    static initProjectBtns() {\r\n        const inboxProjectsBtn = document.getElementById('btn-inbox-projects')\r\n        const todayProjectsBtn = document.getElementById('btn-today-projects')\r\n        const weekProjectsBtn = document.getElementById('btn-week-projects')\r\n        const projectBtns = document.querySelectorAll('[data-project-button]')\r\n        \r\n        inboxProjectsBtn.addEventListener('click', UI.openInboxTasks)\r\n        todayProjectsBtn.addEventListener('click', UI.openTodayTasks)\r\n        weekProjectsBtn.addEventListener('click', UI.openWeekTasks)\r\n        projectBtns.forEach((projectBtn) => \r\n          projectBtn.addEventListener('click', UI.handleProjectBtn)\r\n        )\r\n    }\r\n\r\n    static openInboxTasks() {\r\n        UI.openProject('Inbox', this)\r\n    }\r\n\r\n    static openTodayTasks() {\r\n        Storage.updateTodayProject()\r\n        UI.openProject('Today', this)\r\n    }\r\n\r\n    static openWeekTasks() {\r\n        Storage.updateWeekProject()\r\n        UI.openProject('This Week', this)\r\n    }\r\n\r\n    static handleProjectBtn(e) {\r\n        const projectName = this.children[0].children[1].textContent\r\n\r\n        if (e.target.classList.contains('project')) {\r\n            UI.deleteProject(projectName, this)\r\n            return\r\n        }\r\n\r\n        UI.openProject(projectName, this)\r\n    }\r\n\r\n    static openProject(projectName, projectBtn) {\r\n        const defaultProjectBtns = document.querySelectorAll('.btn-default-project')\r\n        const projectBtns = document.querySelectorAll('.btn-project')\r\n        const btns = [...defaultProjectBtns, ...projectBtns]\r\n\r\n        btns.forEach((btn) => btn.classList.remove('active'))\r\n        projectBtn.classList.add('active')\r\n        UI.closeAddProjectPopup()\r\n        UI.loadProjectContent(projectName)\r\n    }\r\n\r\n    static deleteProject(projectName, btn) {\r\n        if (btn.classList.contains('active')) UI.clearProjectPreview()\r\n        Storage.deleteProject(projectName)\r\n        UI.clearProjects()\r\n        UI.loadProjects()\r\n    }\r\n\r\n    // Adding Task\r\n\r\n    static initAddTaskBtns() {\r\n        const addTaskBtn = document.getElementById('btn-add-task')\r\n        const addTaskPopupBtn = document.getElementById('btn-add-task-popup')\r\n        const cancelTaskPopupBtn = document.getElementById('btn-cancel-task-popup')\r\n        const addTaskPopupInput = document.getElementById('input-add-task-popup')\r\n\r\n        addTaskBtn.addEventListener('click', UI.openTaskPopup)\r\n        addTaskPopupBtn.addEventListener('click', UI.addTask)\r\n        cancelTaskPopupBtn.addEventListener('click', UI.closeTaskPopup)\r\n        addTaskPopupInput.addEventListener('keypress', UI.handleAddTaskPopupInput)\r\n    }\r\n\r\n    static openAddTaskPopup() {\r\n        const addTaskPopup = document.getElementById('add-task-popup')\r\n        const addTaskBtn = document.getElementById('btn-add-task')\r\n\r\n        UI.closeAllPopups()\r\n        addTaskPopup.classList.add('active')\r\n        addTaskBtn.classList.add('active')\r\n    }\r\n\r\n    static closeAddTaskPopup() {\r\n        const addTaskPopup = document.getElementById('add-task-popup')\r\n        const addTaskBtn = document.getElementById('btn-add-task')\r\n        const addTaskInput = document.getElementById('input-add-task-popup')\r\n\r\n        addTaskPopup.classList.remove('active')\r\n        addTaskBtn.classList.remove('active')\r\n        addTaskInput.value = ''\r\n    }\r\n\r\n    static addTask() {\r\n        const projectName = document.getElementById('project-name').textContent\r\n        const addTaskPopupInput = document.getElementById('input-add-task-popup')\r\n        const taskName = addTaskPopupInput.value\r\n\r\n        if (taskName === '') {\r\n            alert('Task must have a name')\r\n            return\r\n        }\r\n        if (Storage.getTodoList().getProject(projectName).contains(taskName)) {\r\n            alert('Task must have a different name than one that already exists')\r\n            addTaskPopupInput.value = ''\r\n            return\r\n        }\r\n\r\n        Storage.addTask(projectName, new Task(taskName))\r\n        UI.createTask(taskName, 'No date')\r\n        UI.closeAddTaskPopup()\r\n    }\r\n\r\n    static handleAddTaskPopupInput(e) {\r\n        if (e.key === 'Enter') UI.addTask()\r\n    }\r\n\r\n    // Task Event Listeners\r\n\r\n    static initTaskBtns() {\r\n        const taskBtns = document.querySelectorAll('[data-task-btn]')\r\n        const taskNameInputs = document.querySelectorAll('[data-input-task-name]')\r\n        const dueDateInputs = document.querySelectorAll('[data-input-due-date]')\r\n\r\n        taskBtns.forEach((taskBtn) =>\r\n          taskBtn.addEventListener('click', UI.handleTaskBtn)\r\n        )\r\n        taskNameInputs.forEach((taskNameInput) =>\r\n          taskNameInput.addEventListener('keypress', UI.renameTask)\r\n        )\r\n        dueDateInputs.forEach((dueDateInput) =>\r\n          dueDateInput.addEventListener('change', UI.setTaskDate)\r\n        )\r\n    }\r\n\r\n    static handleTaskBtn(e) {\r\n        if (e.target.classList.contains('t-item')) {\r\n            UI.setTaskCompleted(this)\r\n            return\r\n        }\r\n        if(e.target.classList.contains('project')) {\r\n            UI.deleteTask(this)\r\n            return\r\n        }\r\n        if (e.target.classList.contains('task-content')) {\r\n            UI.openRenameInput(this)\r\n            return\r\n        }\r\n        if (e.target.classList.contains('due-date')) {\r\n            UI.openSetDateInput(this)\r\n        }\r\n    }\r\n\r\n    static setTaskCompleted(taskBtn) {\r\n        const projectName = document.getElementById('project-name').textContent\r\n        const taskName = taskBtn.children[0].children[1].textContent\r\n\r\n        if (projectName === 'Today' || projectName === 'This week') {\r\n            const parentProjectName = taskName.split('(')[1].split('(')[0]\r\n            Storage.deleteTask(parentProjectName, taskName.split(' ')[0])\r\n            if (projectName === 'Today') {\r\n                Storage.updateTodayProject()\r\n            } else {\r\n                Storage.updateWeekProject()\r\n            }\r\n        } else {\r\n            Storage.deleteTask(projectName, taskName)\r\n        }\r\n        UI.clearTasks()\r\n        UI.loadTasks(projectName)\r\n    }\r\n\r\n    static deleteTask(taskBtn) {\r\n        const projectName = document.getElementById('project-name').textContent\r\n        const taskName = taskBtn.children[0].children[1].textContent\r\n\r\n        if (projectName === 'Today' || projectName === 'This week') {\r\n            const mainProjectName = taskName.split('(')[1].split('(')[0]\r\n            Storage.deleteTask(mainProjectName, taskName)\r\n        }\r\n        Storage.deleteTask(projectName, taskName)\r\n        UI.clearTasks()\r\n        UI.loadTasks(projectName)\r\n    }\r\n\r\n    static openRenameInput(taskBtn) {\r\n        const taskNamePara = taskBtn.children[0].children[1]\r\n        let taskName = taskNamePara.textContent\r\n        const taskNameInput = taskBtn.children[0].children[2]\r\n        const projectName = taskBtn.parentNode.parentNode.children[0].textContent\r\n\r\n        if (projectName === 'Today' || projectName === 'This week') {\r\n            ;[taskName] = taskName.split(' (')\r\n        }\r\n\r\n        UI.closeAllPopups()\r\n        taskNamePara.classList.add('active')\r\n        taskNameInput.classList.add('active')\r\n        taskNameInput.value = taskName\r\n    }\r\n\r\n    static closeRenameInput(taskBtn) {\r\n        const taskName = taskBtn.children[0].children[1]\r\n        const taskNameInput = taskBtn.children[0].children[2]\r\n\r\n        taskName.classList.remove('active')\r\n        taskNameInput.classList.remove('active')\r\n        taskNameInput.value = ''\r\n    }\r\n\r\n    static renameTask(e) {\r\n        if (e.key !== 'Enter') return\r\n\r\n        const projectName = document.getElementById('project-name').textContent\r\n        const taskName = this.previousElementSibling.textContent\r\n        const newTaskName = this.value\r\n\r\n        if (newTaskName === '') {\r\n            alert('Task must have a name')\r\n            return\r\n        }\r\n\r\n        if (Storage.getTodoList().getProject(projectName).contains(newTaskName)) {\r\n            this.value = ''\r\n            alert('Task must have a different name than one that already exists')\r\n            return\r\n        }\r\n\r\n        if (projectName === 'Today' || projectName === 'This Week') {\r\n            const mainProjectName = taskName.split('(')[1].split('(')[0]\r\n            const mainTaskName = taskName.split(' ')[0]\r\n            Storage.renameTask(projectName, taskName, `${newTaskName} (${mainProjectName})`)\r\n            Storage.renameTask(mainProjectName, mainTaskName, newTaskName)\r\n        } else {\r\n            Storage.renameTask(projectName, taskName, newTaskName)\r\n        }\r\n        UI.clearTasks()\r\n        UI.loadTasks(projectName)\r\n        UI.closeRenameInput(this.parentNode.parentNode)\r\n    }\r\n\r\n    static openSetDateInput(taskBtn) {\r\n        const dueDate = taskBtn.children[1].children[0]\r\n        const dueDateInput = taskBtn.children[1].children[1]\r\n\r\n        UI.closeAllPopups()\r\n        dueDate.classList.add('active')\r\n        dueDateInput.classList.add('active')\r\n    }\r\n\r\n    static closeSetDateInput(taskBtn) {\r\n        const dueDate = taskBtn.children[1].children[0]\r\n        const dueDateInput = taskBtn.children[1].children[1]\r\n\r\n        dueDate.classList.remove('active')\r\n        dueDateInput.classList.remove('active')\r\n    }\r\n\r\n    static setTaskDate() {\r\n        const taskBtn = this.parentNode.parentNode\r\n        const projectName = document.getElementById('project-name').textContent\r\n        const taskName = taskBtn.children[0].children[1].textContent\r\n        const newDueDate = format(new Date(this.value), 'MM/dd/yyyy')\r\n\r\n        if (projectName === 'Today' || projectName === 'This week') {\r\n            const mainProjectName = taskName.split('(')[1].split('(')[0]\r\n            const mainTaskName = taskName.split(' (')[0]\r\n            Storage.setTaskDate(projectName, taskName, newDueDate)\r\n            Storage.setTaskDate(mainProjectName, mainTaskName, newDueDate)\r\n            if (projectName === 'Today') {\r\n                Storage.updateTodayProject()\r\n            } else {\r\n                Storage.updateWeekProject()\r\n            }\r\n        } else {\r\n            Storage.setTaskDate(projectName, taskName, newDueDate)\r\n        }\r\n        UI.clearTasks()\r\n        UI.loadTasks(projectName)\r\n        UI.closeSetDateInput(taskBtn)\r\n    }\r\n}\n\n//# sourceURL=webpack://js-todolist/./src/modules/UI.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/index.js");
/******/ 	
/******/ })()
;